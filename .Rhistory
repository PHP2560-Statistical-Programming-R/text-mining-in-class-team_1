<<<<<<< HEAD
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
axis.text = element_text( hjust = 3 ) ,
axis.line.y = element_blank(),
axis.ticks.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
axis.text = element_text( hjust = -8 ) ,
axis.line.y = element_blank(),
axis.ticks.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
axis.text = element_text( hjust = -80 ) ,
axis.line.y = element_blank(),
axis.ticks.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
axis.text = element_text( hjust = -8 ) ,
axis.line.y = element_blank(),
axis.ticks.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
axis.text = element_text( hjust = -8 ) ,
axis.line.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
axis.line.y = element_blank()
)
harrypoterclean %>%
# filter uut confusing words
filter(word != "professor") %>%
anti_join(characters_listjoin) %>%
# joining with sentiment
inner_join(get_sentiments("nrc")) %>%
count(Book, sentiment, word, sort = TRUE) %>%
group_by(Book) %>%
# subseting top 10 mentioned words per sentiment
top_n(10) %>%
ungroup() %>%
# graph making
mutate(word = reorder(paste(sentiment, Book, sep = "__"), n)) %>%
ggplot(aes(word, n, fill = Book)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~Book, nrow = 2, scales = "free") +
coord_flip()  +
theme_minimal() + # start with a minimal them and add what we need
theme( text = element_text(color = "gray20"),
axis.text = element_text(face = "italic"),
axis.text.x = element_text(size = 7),
axis.ticks.x = element_blank(),
axis.line = element_line(color = "gray50", size = 0.5),
axis.line.y   = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_line(color = "gray50", size = .3),
panel.grid.major.x = element_line(color = "gray50", size = .3)
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y = element_blank(),
axis.line.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.x = element_blank(),
axis.line.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.minor.y  = element_blank(),
axis.line.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
axis.line.y = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank()
text = element_text(size = 5)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 5)
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 8)
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 7)
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 8)
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 7)
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 7, color = "black")
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_blank()
)
harrypoterclean %>%
inner_join(characters_listjoin) %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
arrange(Book, fiftylines, word) %>%
group_by(Book,fiftylines) %>%
filter(!word %in% c( "sir", "harry")) %>%
filter(n == max(n)) %>%
ungroup() %>%
top_n(100) %>%
ggplot(aes(x = word , by= word, fill = word)) +
facet_wrap(~Book) +
geom_bar(show.legend = F) +
coord_flip() +
theme_minimal() +
theme(
panel.grid.major.y  = element_blank(),
text = element_text(size = 7, color = "black")
)
harrypoterclean %>%
# filter uut confusing words
filter(word != "professor") %>%
anti_join(characters_listjoin) %>%
# joining with sentiment
inner_join(get_sentiments("nrc")) %>%
count(Book, sentiment, word, sort = TRUE) %>%
group_by(Book) %>%
# subseting top 10 mentioned words per sentiment
top_n(10) %>%
ungroup() %>%
# graph making
mutate(word = reorder(paste(sentiment, Book, sep = "__"), n)) %>%
ggplot(aes(word, n, fill = Book)) +
geom_col(show.legend = FALSE) +
scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
facet_wrap(~Book, nrow = 2, scales = "free") +
coord_flip()  +
theme_minimal() + # start with a minimal them and add what we need
theme( text = element_text(color = "gray20"),
axis.text = element_text(face = "italic"),
axis.text.x = element_text(size = 7),
axis.ticks.x = element_blank(),
axis.line = element_line(color = "gray50", size = 0.5),
axis.line.y   = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_line(color = "gray50", size = .3),
panel.grid.major.x = element_line(color = "gray50", size = .3)
)
harrypoterclean %>%
filter(word == "harry") %>%
mutate( fiftylines=  floor(line / 50)) %>%
count(Book, fiftylines, word) %>%
#making graph
ggplot(aes(fiftylines, n, color = Book)) +
# Make facets by Book
facet_wrap(~Book) +
geom_line(size = .1, show.legend = FALSE) +
expand_limits(y = 0)
harrypoterclean %>%
count(Book) %>%
rename(total_word = n) %>%
ungroup() %>%
left_join(harrypoterclean, "Book") %>%
# joining with sentiment "nrc"
inner_join(get_sentiments("nrc")) %>%
count( Book,total_word, sentiment , sort = TRUE) %>%
ungroup() %>%
mutate(percent = n/total_word)%>%
# filtering only negative sentiments
filter(sentiment == "fear") %>%
arrange(desc(percent)) %>%
ggplot( aes(x = Book, y = percent, fill = Book))+
geom_col(width = .7 ,show.legend = T ) +
theme_minimal() + # start with a minimal them and add what we need
theme( text = element_text(color = "gray20"),
legend.position = c("top"), # position the legend to the upper left
legend.direction = "horizontal",
legend.justification = 0.1, # anchor point for legend position
legend.text = element_text(size = 7, color = "black"),
axis.text = element_text(face = "italic"),
axis.text.x = element_text(size = 7),
axis.line = element_line(color = "gray50", size = 0.5),
axis.line.y = element_blank(),
panel.grid.major = element_line(color = "gray50", size = .5),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_line(color = "gray50", size = .5)
)
??check_packages
# function to check for required packages by:https://gist.github.com/smithdanielle/9913897
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages<-c("ggplot2", "dplyr", "stringi", "harrypotter", "tidytext", "rebus")
check.packages(packages)
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")}
devtools::install_github("bradleyboehmke/harrypotter")
library(dplyr)
library(stringi)
library(harrypotter)
library(tidytext)
library(rebus)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source("check_packages.R")
packages<-c("ggplot2", "dplyr", "stringi", "harrypotter", "tidytext", "rebus")
check.packages(packages)
View(check.packages)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01.R', echo=TRUE)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/01_ get Harry potter.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(harrypoter)
source('~/Documents/MPH Brown /PHP 1560 /in class/text-mining-in-class-team_1/Nour/02_ getting and cleaning data  .R', echo=TRUE)
harrypoter
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
characters_listjoin
=======
# Fetch series information from theGuardian.com e.g publisher, ranking, sales, author e.t.c
seriesinfo <- read.csv("https://docs.google.com/spreadsheets/d/1dhxblR1Vl7PbVP_mNhwEa3_lfUWiF__xSODLq1W83CA/export?format=csv&id=1dhxblR1Vl7PbVP_mNhwEa3_lfUWiF__xSODLq1W83CA&gid=0")
# Join BookMetadata and HarryPotter dfs by "Title"
harrypotter_with_info <- rbind(book1,book2, book3, book4, book5, book6, book7) %>% inner_join(seriesinfo, by = "Title")%>%
group_by(Title) %>%
mutate(Chapter = row_number())%>% # add chapter
ungroup()
harrypotterSeries <- harrypotter_with_info %>%
unnest_tokens(sentence, text, token = "sentences") %>%
mutate(line = row_number()) # add sentences
head(harrypotterSeries)
#Restructure it in the one-token-per-row format
harrypotter_token <- harrypotterSeries %>%
unnest_tokens(word, sentence)
harrypotter_token %>%
select(Title, Chapter, word) %>%
head()
#Remove stop words
harrypotter_token_clean <- harrypotter_token %>%
anti_join(stop_words)
#web scrape main characters of Harry Potter Series from
library(XML)
library(RCurl)
# download harry potter wikipedia page
raw_wiki_names = readLines('https://en.wikipedia.org/wiki/List_of_Harry_Potter_characters')
#define custom stop word used in data cleaning
custom_stop_words <-c('Wikipedia','Wikimedia','The','Puppet','Hogwarts','Stories', 'Quidditch','Death')
# read entire hp_wikipedia_site
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
character_pattern<-capture (UPPER %R% one_or_more(WRD)) %R% SPC %R% capture(UPPER %R% one_or_more(WRD))
harrypotter_characters <- str_match(raw_wiki_names, character_pattern) %>%
as.data.frame() %>% # convert to data frame for easy manipulation
na.exclude()%>% # remove missing data
setNames(c( "FullName", "FirstName", "LastName")) %>% # set column names
arrange(FullName) %>% # arrange
filter(!FirstName%in%custom_stop_words) %>% # clean data by first name
filter(!LastName%in%custom_stop_words) %>% # clean data by last name
unique()
harrypotter_clean_tokens %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FirstName") ) %>%
count(FullName,sort= TRUE)
harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FirstName") ) %>%
count(FullName,sort= TRUE)
harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FirstName"|"LastName") ) %>%
count(FullName,sort= TRUE)
harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FirstName") ) %>%
count(FullName,sort= TRUE)
harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "LastName") ) %>%
count(FullName,sort= TRUE)
#web scrape main characters of Harry Potter Series from Harry Potter Wikipedia page
raw_wiki_names = readLines('https://en.wikipedia.org/wiki/List_of_Harry_Potter_characters')
#define custom stop word used in data cleaning
custom_stop_words <-c('Wikipedia','Wikimedia','The','Puppet','Hogwarts','Stories', 'Quidditch','Death',"Wizarding", "Supporting", "Lego")
# read entire hp_wikipedia_site
email <- capture(one_or_more(WRD)) %R%
"@" %R% capture(one_or_more(WRD)) %R%
DOT %R% capture(one_or_more(WRD))
character_pattern<-capture (UPPER %R% one_or_more(WRD)) %R% SPC %R% capture(UPPER %R% one_or_more(WRD))
harrypotter_characters <- str_match(raw_wiki_names, character_pattern) %>%
as.data.frame() %>% # convert to data frame for easy manipulation
na.exclude()%>% # remove missing data
setNames(c( "FullName", "FirstName", "LastName")) %>% # set column names
arrange(FullName) %>% # arrange
filter(!FirstName%in%custom_stop_words) %>% # clean data by first name
filter(!LastName%in%custom_stop_words) %>% # clean data by last name
unique()
setA<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FirstName") ) %>%
count(FullName,sort= TRUE)
setB<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "LastName") ) %>%
count(FullName,sort= TRUE)
setC<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FullName") ) %>%
count(FullName,sort= TRUE)
View(harrypotter_characters)
setC<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c("Harry Potter")) %>%
count(FullName,sort= TRUE)
setC<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, c("Harry Potter")) %>%
count(FullName,sort= TRUE)
View(harrypotter_token_clean)
harrypotter_clean_tokens%>%
inner_join(get_sentiments("nrc"), by = "word") %>% # join sentiment
group_by(Title)%>% # make each row  abook
count(sentiment, sort = TRUE)%>% # count sentiment
filter(sentiment=="fear")  #filter by negative sentiment
harrypotter_token_clean%>%
inner_join(get_sentiments("nrc"), by = "word") %>% # join sentiment
group_by(Title)%>% # make each row  abook
count(sentiment, sort = TRUE)%>% # count sentiment
filter(sentiment=="fear")  #filter by negative sentiment
setA<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FirstName") ) %>%
count(FullName,sort= TRUE)
setB<-harrypotter_token_clean %>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "LastName") ) %>%
count(FullName,sort= TRUE)
setA+setB
View(setA)
View(setB)
inner_join(setA,setB)
inner_join(setA,setB, by=c(id="FullName"))
inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
setC
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
count(setC$n.z,FullName,sort=TRUE)
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
count(setC,FullName,sort=TRUE)
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
setC[order(setC$n.z),]
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
setC[order(setC$n.z),c(1,4)]
setC<-inner_join(setA,setB, by="FullName")
setC$n.z<-setC$n.x+setC$n.y
setC[order(-setC$n.z),c(1,4)]
word_count <- harrypotter_token_clean %>%
count(word, sort = TRUE) %>%
mutate(word = reorder(word, n))
head(word_count)
# Visualization of the most common words
word_count_gt_600 <- word_count %>%
filter(n > 600)
# plot using word cloud
wordcloud(words = word_count_gt_600$word, freq = word_count_gt_600$n, min.freq = 1, random.order=FALSE, rot.per=0.35, colors=brewer.pal(8, "Dark2"))
hp_sentiment_difference<- harrypotter_token_clean%>%
inner_join(get_sentiments("nrc"), by = "word") %>% # join sentiment
count(Title, Chapter, sentiment, sort = TRUE)%>% # count sentiment
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
ggplot(hp_sentiment_difference, aes(Chapter, sentiment, fill = Title))+
geom_line(size = 1, color = brewer.pal(3, "Set1")[3]) +
facet_wrap(~Title, ncol = 2, scales = "free_x")
ggplot(hp_sentiment_difference, aes(Chapter, sentiment, colour = Title))+
geom_line()+
theme(
legend.position ="bottom")
View(harrypotter_with_info)
View(seriesinfo)
popularity<-subset(seriesinfo,Author="Rowling, J.K.")
View(popularity)
popularity<-subset(seriesinfo,Author="Rowling, J.K.")
popularity<-subset(seriesinfo,Author=="Rowling, J.K.")
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
View(popularity)
2,950,264
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
popularity[2,2]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
popularity[2,3]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
popularity[2,4]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
popularity[7,4]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]<- 2950264+1153181
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]<-sum(2950264,1153181)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
as.numeric(popularity$Volume.Sales)
typeof(popularity[7,4])
sum(2950264,1153181)
typeof(sum(2950264,1153181))
sum(2950264,1153181)
typeof(4103445)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
as.interger(popularity$Volume.Sales)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
as.numeric(popularity$Volume.Sales)
popularity[7,4]==4103445
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[popularity=="1,153,181"]<-"4,103,445"
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[popularity==1,153,181]<-4,103,445
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[popularity==1153181]<-4103445
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[popularity==1153181]<-4103445
the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[popularity$Volume.Sales==1153181]<-4103445
View(popularity)
typeof(popularity[7,4])
typeof(4)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]<-4103445
as.numeric(popularity$Volume.Sales)
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity$Volume.Sales
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]<-4103445
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]<-4,103,445
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[7,4]<-"4,103,445"
as.integer(4,103,445)
as.integer(4103445)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
replacement<-as.integer(4103445)
popularity[7,4]<-replacement
popularity[popularity=3,377,906]
popularity[popularity="3,377,906"]
popularity[6,4]
popularity[6,4]
popularity[popularity="3,377,906"]
typeof(popularity[6,4])
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[order(-popularity$Volume.Sales),c(1,4)]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[order(-popularity$Volume.Sales),c(2,4)]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[order(popularity$Volume.Sales),c(2,4)]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
popularity[order(-popularity$Volume.Sales),c(2,4)]
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The" & Title != "Harry Potter and the Half-blood Prince:Children's Edition")
#popularity[order(-popularity$Volume.Sales),c(2,4)]
popularity[2,4]<-popularity[4,4]
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
popularity[order(-popularity$Volume.Sales),c(2,4)]
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
popularity[order(-popularity$Volume.Sales),c(2,4)]
popularity[7,4]<-popularity[7,4]+popularity[8,4]
View(popularity)
popularity<-subset(seriesinfo,Author=="Rowling, J.K." & Title != "Tales of Beedle the Bard,The")
as.numeric(popularity$Volume.Sales)
popularity[order(-popularity$Volume.Sales),c(2,4)]
popularity[7,4]<-popularity[7,4]+popularity[8,4]
View(popularity)
hp_ngrams <- harrypotterSeries %>%
unnest_tokens(bigram, sentence, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigram_counts <- hp_ngrams %>%
count(word1, word2, sort = TRUE)
head(bigram_counts)
bigram_counts%>%
filter(n > 80)%>%
ggplot(aes(x = reorder(word1, -n), y = reorder(word2, -n), fill = n)) +
geom_tile(alpha = 0.8, color = "white") +
coord_flip() +
theme(legend.position = "right") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
labs(x = "first word in pair",
y = "second word in pair")
setC<-hp_ngrams%>%
mutate(id = R.utils::capitalize(word)) %>%
inner_join(harrypotter_characters, by =c(id = "FullName") ) %>%
count(FullName,sort= TRUE)
bigram_graph <- bigram_counts %>%
filter(n > 60) %>%
graph_from_data_frame()
install.packages("igraph")
library(igraph)
bigram_graph <- bigram_counts %>%
filter(n > 60) %>%
graph_from_data_frame()
# set seed
set.seed(2017)
# define arrow
a <- grid::arrow(type = "closed", length = unit(.10, "inches"))
# generate graph
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "chartreuse", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(RColorBrewer)
library(harrypotter)
library(tidyr)
library(RColorBrewer)
library(wordcloud)
library(rebus)
#library(R.utils)
library(htmlwidgets)
library(bitops)
library(XML)
library(RCurl)
library(igraph)
library(ggraph)
bigram_graph <- bigram_counts %>%
filter(n > 60) %>%
graph_from_data_frame()
# set seed
set.seed(2017)
# define arrow
a <- grid::arrow(type = "closed", length = unit(.10, "inches"))
# generate graph
ggraph(bigram_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.07, 'inches')) +
geom_node_point(color = "chartreuse", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
# create hp_big_grams object
hp_bigrams_separated  <- harrypotterSeries %>%
unnest_tokens(bigram, sentence, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
negative_words <- c("not", "no", "never", "without")
hp_negated_words  <- hp_bigrams_separated %>%
# filter by negative words
filter(word1 %in% negative_words) %>%
inner_join(get_sentiments("afinn"), by = c(word2 = "word")) %>%
count(word2, score, sort = TRUE) %>%
ungroup()
head(hp_negated_words)
hp_negated_words %>%
mutate(contribution = nn * score) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, nn * score, fill = nn * score > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by \"not\"") +
ylab("Sentiment score * number of occurrences") +
coord_flip()
book_words <- harrypotter_token_clean %>%
count(Title, word, sort = TRUE) %>%
ungroup()
total_words <- book_words %>%
group_by(Title) %>%
summarize(total = sum(n))
book_words <- left_join(book_words, total_words)
head(book_words)
ggplot(book_words, aes(n/total, fill = Title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~Title, ncol = 2, scales = "free_y")
# These plots exhibit similar distributions for all the books, with most of the words occuring rarely and fewer words that occur frequently.
freq_by_rank <- book_words %>%
group_by(Title) %>%
mutate(rank = row_number(),
`term frequency` = n/total)
head(freq_by_rank)
freq_by_rank %>%
ggplot(aes(rank, `term frequency`, color = Title)) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
# We see that all 7 novels are similar to each other, and that the relationship between rank and frequency does have negative slope.
words <- harrypotter_token_clean %>%
count(Title, word, sort = TRUE) %>%
ungroup()
total_words <- words %>%
group_by(Title) %>%
summarize(total = sum(n))
words <- left_join(words, total_words)
head(words)
ggplot(words, aes(n/total, fill = Title)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~Title, ncol = 2, scales = "free_y")
# These plots exhibit similar distributions for all the books, with most of the words occuring rarely and fewer words that occur frequently.
frequency_rank <- words %>%
group_by(Title) %>%
mutate(rank = row_number(),
`term frequency` = n/total)
head(frequency_rank)
frequencyby_rank %>%
ggplot(aes(rank, `term frequency`, color = Title)) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
frequency_rank <- words %>%
group_by(Title) %>%
mutate(rank = row_number(),
`term frequency` = n/total)
head(frequency_rank)
frequency_rank %>%
ggplot(aes(rank, `term frequency`, color = Title)) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
# We see that all 7 novels are similar to each other, and that the relationship between rank and frequency does have negative slope.
subset_rank <- frequency_rank %>%
filter(rank < 500,
rank > 10)
lm(log10(`term frequency`) ~ log10(rank), data = subset_rank)
frequency_rank %>%
ggplot(aes(rank, `term frequency`, color = Title)) +
geom_abline(intercept = -0.62, slope = -1.1, color = "gray50", linetype = 2) +
geom_line(size = 1.2, alpha = 0.8) +
scale_x_log10() +
scale_y_log10()
# we can see that we have deviations at higher ranks.This is unusual, because the author uses  a lower percentage of the most common words
# using nrc and afinn to get both sentiment and score
hp_sentiment <- harrypotter_token_clean%>%
inner_join(get_sentiments("nrc"), by = "word") %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(Title, Chapter,sentiment)%>%
summarise(count=sum(score))
hp_sentiment%>%
filter(count>0)%>%
ggplot( aes(x = Chapter, y = count)) +
geom_line(size = 1, color = brewer.pal(3, "Set1")[3]) +
facet_grid(sentiment~.) +
uniform_ggplot_theme() +
theme(
axis.text.x = element_text(angle = 0, vjust = 0, hjust = 0),
legend.position = "none") +
labs(x = "Chapter", y = "Sentiment Value",
title = "Sentiments Progression (Positive sentiments)")
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(RColorBrewer)
library(harrypotter)
library(tidyr)
library(RColorBrewer)
library(wordcloud)
library(rebus)
#library(R.utils)
library(htmlwidgets)
library(bitops)
library(XML)
library(RCurl)
library(igraph)
library(ggraph)
library(viridis)
install.packages("viridis")
install.packages("viridis")
library(viridis)
# using nrc and afinn to get both sentiment and score
hp_sentiment <- harrypotter_token_clean%>%
inner_join(get_sentiments("nrc"), by = "word") %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
group_by(Title, Chapter,sentiment)%>%
summarise(count=sum(score))
hp_sentiment%>%
filter(count>0)%>%
ggplot( aes(x = Chapter, y = count)) +
geom_line(size = 1, color = brewer.pal(3, "Set1")[3]) +
facet_grid(sentiment~.) +
uniform_ggplot_theme() +
theme(
axis.text.x = element_text(angle = 0, vjust = 0, hjust = 0),
legend.position = "none") +
labs(x = "Chapter", y = "Sentiment Value",
title = "Sentiments Progression (Positive sentiments)")
library(dplyr)
library(stringr)
library(tidytext)
library(ggplot2)
library(RColorBrewer)
library(harrypotter)
library(tidyr)
library(RColorBrewer)
library(wordcloud)
#library(R.utils)
library(rebus)
library(htmlwidgets)
library(bitops)
library(XML)
library(RCurl)
library(igraph)
library(ggraph)
library(viridis)
# Combine all The Harry Potter books into 1 dataframe and add column which will be used a reference "Title"
book1 <- data_frame(Title="Harry Potter and the Philosopher's Stone", text=philosophers_stone)
book2 <- data_frame(Title="Harry Potter and the Chamber of Secrets", text=chamber_of_secrets)
book3 <- data_frame(Title="Harry Potter and the Prisoner of Azkaban", text=prisoner_of_azkaban)
book4 <- data_frame(Title="Harry Potter and the Goblet of Fire", text=goblet_of_fire)
book5 <- data_frame(Title="Harry Potter and the Order of the Phoenix", text=order_of_the_phoenix)
book6 <- data_frame(Title="Harry Potter and the Half-blood Prince", text=half_blood_prince)
book7 <- data_frame(Title="Harry Potter and the Deathly Hallows", text=deathly_hallows)
# Fetch series information from theGuardian.com e.g publisher, ranking, sales, author e.t.c
seriesinfo <- read.csv("https://docs.google.com/spreadsheets/d/1dhxblR1Vl7PbVP_mNhwEa3_lfUWiF__xSODLq1W83CA/export?format=csv&id=1dhxblR1Vl7PbVP_mNhwEa3_lfUWiF__xSODLq1W83CA&gid=0")
>>>>>>> 8805b2ebe6f35cc63f5719040cc747e69f4f3775
